Problem 1: Find the shortest path in the 3*3 matrix where you can travel in 0 but not in 1.

Approach :
1) If the leftmost element is one then return 0.
2) Initialize dx and dy as two array and the size of the matrix.dx and dy will represent the changes in the coordinates after the movement.
3)Initiate queue. Each element in the queue is an array containing the x and y coordinates of a cell and the number of steps taken to reach that cell.
4)Add 0,0,1 to queue and mark grid[0][0] = 1
5)While the queue isnot empty, add all valid positions that can be visited from this cell and increase step by 1
6)Mark all valid positions = 1 (No revisit)
7)if cell = n-1, n-1 return steps

class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        if (grid[0][0] == 1 || grid[grid.length - 1][grid[0].length - 1] == 1) {
            return -1;
        }
        
        int n = grid.length;
        int[]dx = {-1,0,1};
        int[]dy = {-1,0,1};
        
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0, 1});
        grid[0][0] = 1;
        
        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            int x = curr[0];
            int y = curr[1];
            int steps = curr[2];
            
            if (x == n - 1 && y == n - 1) {
                return steps;
            }
            
            for(int i = 0;i<3;i++){
                for(int j = 0;j<3;j++){
                    int nx = x + dx[i];
                    int ny = y + dy[j];
                    if (nx >= 0 && nx < n && ny >= 0 && ny < n && grid[nx][ny] == 0) {
                    queue.offer(new int[]{nx, ny, steps + 1});
                    grid[nx][ny] = 1;
                }
                }
            }
        }
        return -1;
    }
}
